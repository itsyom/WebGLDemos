/**
 * Created by ll on 2017/3/1.
 */
var Demo;
(function (Demo) {
    var Shader = (function () {
        function Shader(v, f, gl) {
            this.program = null;
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, v);
            gl.compileShader(vertexShader);
            var succ = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);
            if (!succ) {
                var log = gl.getShaderInfoLog(vertexShader);
                console.log("compile shader error:", log);
                return;
            }
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, f);
            gl.compileShader(fragmentShader);
            succ = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);
            if (!succ) {
                var log = gl.getShaderInfoLog(fragmentShader);
                console.log(log);
                return;
            }
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragmentShader);
            succ = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (!succ) {
                var log = gl.getProgramInfoLog(program);
                console.log(log);
                return;
            }
            this.program = program;
        }
        Shader.prototype.getWebglProgram = function () {
            return this.program;
        };
        return Shader;
    }());
    Demo.Shader = Shader;
})(Demo || (Demo = {}));
/**
 * Created by hey on 2017/7/9.
 */
var Demo;
(function (Demo) {
    var Triangle;
    (function (Triangle) {
        // import any = Demo.any;
        // import Shader = Demo.Shader;
        Triangle.gl = null;
        var vao = null;
        var program = null;
        var vertices = new Float32Array([
            0, 0.5,
            0.5, -0.5,
            -0.5, -0.5
        ]);
        var colors = new Float32Array([
            1.0, 0, 0,
            0., 1, 0,
            0, 0, 1
        ]);
        var indices = new Uint16Array([
            0, 1, 2
        ]);
        var shader_vertex = "#version 300 es\n        \n        layout(location = 0) in vec2 position;\n        layout(location = 1) in vec3 color;\n        \n        out vec3 outColor;\n        \n        void main(){\n            outColor = color;\n            gl_Position = vec4(position,1.,1.);\n        }\n        \n    ";
        var shader_fragment = "#version 300 es\n        precision highp float;\n        in vec3 outColor;\n        out vec4 color;\n        void main(){\n            color = vec4(outColor,1.);\n        }\n        \n    ";
        function init(w, h) {
            Triangle.gl.viewport(0, 0, w, h);
            initVAO();
            initProgram();
        }
        Triangle.init = init;
        function initVAO() {
            vao = Demo.any(Triangle.gl).createVertexArray();
            Demo.any(Triangle.gl).bindVertexArray(vao);
            var vbo = Triangle.gl.createBuffer();
            Triangle.gl.bindBuffer(Triangle.gl.ARRAY_BUFFER, vbo);
            Triangle.gl.bufferData(Triangle.gl.ARRAY_BUFFER, vertices, Triangle.gl.STATIC_DRAW);
            Triangle.gl.vertexAttribPointer(0, 2, Triangle.gl.FLOAT, false, 0, 0);
            Triangle.gl.enableVertexAttribArray(0);
            var vbo1 = Triangle.gl.createBuffer();
            Triangle.gl.bindBuffer(Triangle.gl.ARRAY_BUFFER, vbo1);
            Triangle.gl.bufferData(Triangle.gl.ARRAY_BUFFER, colors, Triangle.gl.STATIC_DRAW);
            Triangle.gl.vertexAttribPointer(1, 3, Triangle.gl.FLOAT, false, 0, 0);
            Triangle.gl.enableVertexAttribArray(1);
            var vbo2 = Triangle.gl.createBuffer();
            Triangle.gl.bindBuffer(Triangle.gl.ELEMENT_ARRAY_BUFFER, vbo2);
            Triangle.gl.bufferData(Triangle.gl.ELEMENT_ARRAY_BUFFER, indices, Triangle.gl.STATIC_DRAW);
            Demo.any(Triangle.gl).bindVertexArray(null);
            Triangle.gl.bindBuffer(Triangle.gl.ARRAY_BUFFER, null);
            Triangle.gl.bindBuffer(Triangle.gl.ELEMENT_ARRAY_BUFFER, null);
        }
        function initProgram() {
            var shader = new Demo.Shader(shader_vertex, shader_fragment, Triangle.gl);
            program = shader.program;
        }
        function render() {
            Triangle.gl.clear(Triangle.gl.COLOR_BUFFER_BIT | Triangle.gl.DEPTH_BUFFER_BIT);
            Triangle.gl.useProgram(program);
            Demo.any(Triangle.gl).bindVertexArray(vao);
            Triangle.gl.drawElements(Triangle.gl.TRIANGLES, 3, Triangle.gl.UNSIGNED_SHORT, 0);
            Demo.any(Triangle.gl).bindVertexArray(vao);
        }
        Triangle.render = render;
    })(Triangle = Demo.Triangle || (Demo.Triangle = {}));
})(Demo || (Demo = {}));
/**
 * Created by hey on 2017/7/9.
 */
var Demo;
(function (Demo) {
    function any(tar) {
        return tar;
    }
    Demo.any = any;
})(Demo || (Demo = {}));
//# sourceMappingURL=bundle.min.js.map