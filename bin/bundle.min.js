var Demo;
(function (Demo) {
    var mat3 = (function () {
        function mat3() {
        }
        mat3.create = function () {
            var dest = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
            return dest;
        };
        ;
        mat3.set = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = mat[3];
            dest[4] = mat[4];
            dest[5] = mat[5];
            dest[6] = mat[6];
            dest[7] = mat[7];
            dest[8] = mat[8];
            return dest;
        };
        ;
        mat3.mulVec3 = function (mat, vec, dest) {
            var x = vec[0], y = vec[1], z = vec[2];
            dest[0] = mat[0] * x + mat[3] * y + mat[6] * z;
            dest[1] = mat[1] * x + mat[4] * y + mat[7] * z;
            dest[2] = mat[2] * x + mat[5] * y + mat[8] * z;
            return dest;
        };
        ;
        mat3.mulVec2 = function (mat, vec, dest) {
            if (dest === void 0) { dest = []; }
            var x = vec[0], y = vec[1];
            dest[0] = mat[0] * x + mat[3] * y + mat[6];
            dest[1] = mat[1] * x + mat[4] * y + mat[7];
            dest[2] = mat[2] * x + mat[5] * y + mat[8];
            return dest;
        };
        mat3.getInverse = function (mat, dest) {
            if (dest === void 0) { dest = []; }
            var n11 = mat[0], n21 = mat[1], n31 = mat[2], n12 = mat[3], n22 = mat[4], n32 = mat[5], n13 = mat[6], n23 = mat[7], n33 = mat[8];
            var t11 = n33 * n22 - n32 * n23;
            var t12 = n32 * n13 - n33 * n12;
            var t13 = n23 * n12 - n22 * n13;
            var det = n11 * t11 + n21 * t12 + n31 * t13;
            var detInv = 1 / det;
            dest[0] = t11 * detInv;
            dest[1] = (n31 * n23 - n33 * n21) * detInv;
            dest[2] = (n32 * n21 - n31 * n22) * detInv;
            dest[3] = t12 * detInv;
            dest[4] = (n33 * n11 - n31 * n13) * detInv;
            dest[5] = (n31 * n12 - n32 * n11) * detInv;
            dest[6] = t13 * detInv;
            dest[7] = (n21 * n13 - n23 * n11) * detInv;
            dest[8] = (n22 * n11 - n21 * n12) * detInv;
            return dest;
        };
        mat3.transpose = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[3];
            dest[2] = mat[6];
            dest[3] = mat[1];
            dest[4] = mat[4];
            dest[5] = mat[7];
            dest[6] = mat[2];
            dest[7] = mat[5];
            dest[8] = mat[8];
            return dest;
        };
        ;
        mat3.transposeLocally = function (mat, dest) {
            var a01 = mat[1], a02 = mat[2];
            var a12 = mat[5];
            mat[1] = mat[3];
            mat[2] = mat[6];
            mat[3] = a01;
            mat[5] = mat[7];
            mat[6] = a02;
            mat[7] = a12;
            return mat;
        };
        ;
        mat3.toMat4 = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = 0;
            dest[4] = mat[3];
            dest[5] = mat[4];
            dest[6] = mat[5];
            dest[7] = 0;
            dest[8] = mat[6];
            dest[9] = mat[7];
            dest[10] = mat[8];
            dest[11] = 0;
            dest[12] = 0;
            dest[13] = 0;
            dest[14] = 0;
            dest[15] = 1;
            return dest;
        };
        ;
        mat3.lookAt = function (front, up, dest) {
            var fx = front[0], fy = front[1], fz = front[2], upx = up[0], upy = up[1], upz = up[2];
            var z0, z1, z2, x0, x1, x2, y0, y1, y2, len;
            //vec3.direction(eye, center, z);
            z0 = -fx;
            z1 = -fy;
            z2 = -fz;
            // normalize (no check needed for 0 because of early return)
            len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
            z0 *= len;
            z1 *= len;
            z2 *= len;
            //vec3.normalize(vec3.cross(up, z, x));
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
            if (!len) {
                x0 = 0;
                x1 = 0;
                x2 = 0;
            }
            else {
                len = 1 / len;
                x0 *= len;
                x1 *= len;
                x2 *= len;
            }
            //vec3.normalize(vec3.cross(z, x, y));
            y0 = z1 * x2 - z2 * x1;
            y1 = z2 * x0 - z0 * x2;
            y2 = z0 * x1 - z1 * x0;
            len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
            if (!len) {
                y0 = 0;
                y1 = 0;
                y2 = 0;
            }
            else {
                len = 1 / len;
                y0 *= len;
                y1 *= len;
                y2 *= len;
            }
            dest[0] = x0;
            dest[1] = y0;
            dest[2] = z0;
            dest[3] = x1;
            dest[4] = y1;
            dest[5] = z1;
            dest[6] = x2;
            dest[7] = y2;
            dest[8] = z2;
            return dest;
        };
        ;
        mat3.str = function (mat) {
            return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', '
                + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', '
                + mat[8] + ']';
        };
        ;
        return mat3;
    }());
    mat3.identity = function (dest) {
        dest[0] = 1;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 1;
        dest[5] = 0;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    };
    Demo.mat3 = mat3;
})(Demo || (Demo = {}));
var Demo;
(function (Demo) {
    var mat4 = (function () {
        function mat4() {
            this.rotateY = function (mat, angle, dest) {
                var s = Math.sin(angle);
                var c = Math.cos(angle);
                // Cache the matrix values (makes for huge speed increases!)
                var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
                var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
                if (!dest) {
                    dest = mat;
                }
                else if (mat != dest) {
                    dest[4] = mat[4];
                    dest[5] = mat[5];
                    dest[6] = mat[6];
                    dest[7] = mat[7];
                    dest[12] = mat[12];
                    dest[13] = mat[13];
                    dest[14] = mat[14];
                    dest[15] = mat[15];
                }
                // Perform axis-specific matrix multiplication
                dest[0] = a00 * c + a20 * -s;
                dest[1] = a01 * c + a21 * -s;
                dest[2] = a02 * c + a22 * -s;
                dest[3] = a03 * c + a23 * -s;
                dest[8] = a00 * s + a20 * c;
                dest[9] = a01 * s + a21 * c;
                dest[10] = a02 * s + a22 * c;
                dest[11] = a03 * s + a23 * c;
                return dest;
            };
        }
        mat4.create = function () {
            var dest = [
                1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
                0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0
            ];
            return dest;
        };
        ;
        mat4.set = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = mat[3];
            dest[4] = mat[4];
            dest[5] = mat[5];
            dest[6] = mat[6];
            dest[7] = mat[7];
            dest[8] = mat[8];
            dest[9] = mat[9];
            dest[10] = mat[10];
            dest[11] = mat[11];
            dest[12] = mat[12];
            dest[13] = mat[13];
            dest[14] = mat[14];
            dest[15] = mat[15];
            return dest;
        };
        ;
        mat4.identity = function (dest) {
            dest[0] = 1;
            dest[1] = 0;
            dest[2] = 0;
            dest[3] = 0;
            dest[4] = 0;
            dest[5] = 1;
            dest[6] = 0;
            dest[7] = 0;
            dest[8] = 0;
            dest[9] = 0;
            dest[10] = 1;
            dest[11] = 0;
            dest[12] = 0;
            dest[13] = 0;
            dest[14] = 0;
            dest[15] = 1;
            return dest;
        };
        ;
        mat4.transposeLocally = function (mat) {
            var a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a12 = mat[6], a13 = mat[7];
            var a23 = mat[11];
            mat[1] = mat[4];
            mat[2] = mat[8];
            mat[3] = mat[12];
            mat[4] = a01;
            mat[6] = mat[9];
            mat[7] = mat[13];
            mat[8] = a02;
            mat[9] = a12;
            mat[11] = mat[14];
            mat[12] = a03;
            mat[13] = a13;
            mat[14] = a23;
            return mat;
        };
        ;
        mat4.transpose = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[4];
            dest[2] = mat[8];
            dest[3] = mat[12];
            dest[4] = mat[1];
            dest[5] = mat[5];
            dest[6] = mat[9];
            dest[7] = mat[13];
            dest[8] = mat[2];
            dest[9] = mat[6];
            dest[10] = mat[10];
            dest[11] = mat[14];
            dest[12] = mat[3];
            dest[13] = mat[7];
            dest[14] = mat[11];
            dest[15] = mat[15];
            return dest;
        };
        ;
        mat4.determinant = function (mat) {
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
            return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22
                * a03 + a10 * a31 * a22 * a03 + a20 * a11 * a32 * a03 - a10 * a21
                * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 + a30
                * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13
                + a00 * a21 * a32 * a13 + a30 * a11 * a02 * a23 - a10 * a31 * a02
                * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 + a10 * a01
                * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10
                * a21 * a02 * a33 + a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33
                - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;
        };
        ;
        mat4.inverse = function (mat, dest) {
            if (!dest) {
                dest = mat;
            }
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 = a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            // Calculate the determinant (inlined to avoid double-caching)
            var invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05
                * b06);
            dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
            dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
            dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
            dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
            dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
            dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
            dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
            dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
            dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
            dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
            dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
            dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
            dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
            dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
            dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
            dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
            return dest;
        };
        ;
        mat4.toRotationMat = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = mat[3];
            dest[4] = mat[4];
            dest[5] = mat[5];
            dest[6] = mat[6];
            dest[7] = mat[7];
            dest[8] = mat[8];
            dest[9] = mat[9];
            dest[10] = mat[10];
            dest[11] = mat[11];
            dest[12] = 0;
            dest[13] = 0;
            dest[14] = 0;
            dest[15] = 1;
            return dest;
        };
        ;
        mat4.toMat3 = function (mat, dest) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = mat[4];
            dest[4] = mat[5];
            dest[5] = mat[6];
            dest[6] = mat[8];
            dest[7] = mat[9];
            dest[8] = mat[10];
            return dest;
        };
        ;
        mat4.toInverseMat3 = function (mat, dest) {
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10];
            var b01 = a22 * a11 - a12 * a21;
            var b11 = -a22 * a10 + a12 * a20;
            var b21 = a21 * a10 - a11 * a20;
            var d = a00 * b01 + a01 * b11 + a02 * b21;
            if (!d) {
                return null;
            }
            var id = 1 / d;
            if (!dest) {
                dest = Demo.mat3.create();
            }
            dest[0] = b01 * id;
            dest[1] = (-a22 * a01 + a02 * a21) * id;
            dest[2] = (a12 * a01 - a02 * a11) * id;
            dest[3] = b11 * id;
            dest[4] = (a22 * a00 - a02 * a20) * id;
            dest[5] = (-a12 * a00 + a02 * a10) * id;
            dest[6] = b21 * id;
            dest[7] = (-a21 * a00 + a01 * a20) * id;
            dest[8] = (a11 * a00 - a01 * a10) * id;
            return dest;
        };
        ;
        mat4.multiply = function (mat, mat2, dest) {
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
            var b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3];
            var b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7];
            var b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11];
            var b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
            dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
            dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
            dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
            dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
            dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
            dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
            dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
            dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
            dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
            dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
            dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
            dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
            dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
            dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
            dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
            dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
            return dest;
        };
        ;
        mat4.mulVec3 = function (mat, vec, dest) {
            if (!dest) {
                dest = vec;
            }
            var x = vec[0], y = vec[1], z = vec[2];
            dest[0] = mat[0] * x + mat[4] * y + mat[8] * z;
            dest[1] = mat[1] * x + mat[5] * y + mat[9] * z;
            dest[2] = mat[2] * x + mat[6] * y + mat[10] * z;
            return dest;
        };
        ;
        mat4.mulPos3 = function (mat, vec, dest) {
            if (dest === void 0) { dest = [0.0, 0.0, 0.0]; }
            var x = vec[0], y = vec[1], z = vec[2];
            dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
            dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
            dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
            return dest;
        };
        ;
        mat4.multiplyVec4 = function (mat, vec, dest) {
            if (!dest) {
                dest = vec;
            }
            var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
            dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
            dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
            dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
            dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
            return dest;
        };
        ;
        mat4.translate = function (mat, vec, dest) {
            var x = vec[0], y = vec[1], z = vec[2];
            if (!dest || mat == dest) {
                mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
                mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
                mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
                mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
                return mat;
            }
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            dest[0] = a00;
            dest[1] = a01;
            dest[2] = a02;
            dest[3] = a03;
            dest[4] = a10;
            dest[5] = a11;
            dest[6] = a12;
            dest[7] = a13;
            dest[8] = a20;
            dest[9] = a21;
            dest[10] = a22;
            dest[11] = a23;
            dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
            dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
            dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
            dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
            return dest;
        };
        ;
        mat4.scale = function (mat, vec, dest) {
            var x = vec[0], y = vec[1], z = vec[2];
            if (!dest || mat == dest) {
                mat[0] *= x;
                mat[1] *= x;
                mat[2] *= x;
                mat[3] *= x;
                mat[4] *= y;
                mat[5] *= y;
                mat[6] *= y;
                mat[7] *= y;
                mat[8] *= z;
                mat[9] *= z;
                mat[10] *= z;
                mat[11] *= z;
                return mat;
            }
            dest[0] = mat[0] * x;
            dest[1] = mat[1] * x;
            dest[2] = mat[2] * x;
            dest[3] = mat[3] * x;
            dest[4] = mat[4] * y;
            dest[5] = mat[5] * y;
            dest[6] = mat[6] * y;
            dest[7] = mat[7] * y;
            dest[8] = mat[8] * z;
            dest[9] = mat[9] * z;
            dest[10] = mat[10] * z;
            dest[11] = mat[11] * z;
            dest[12] = mat[12];
            dest[13] = mat[13];
            dest[14] = mat[14];
            dest[15] = mat[15];
            return dest;
        };
        ;
        mat4.rotate = function (mat, angle, axis, dest) {
            var x = axis[0], y = axis[1], z = axis[2];
            var len = Math.sqrt(x * x + y * y + z * z);
            if (!len) {
                return null;
            }
            if (len != 1) {
                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
            }
            var s = Math.sin(angle);
            var c = Math.cos(angle);
            var t = 1 - c;
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            // Construct the elements of the rotation matrix
            var b00 = x * x * t + c, b01 = y * x * t + z * s, b02 = z * x * t - y * s;
            var b10 = x * y * t - z * s, b11 = y * y * t + c, b12 = z * y * t + x * s;
            var b20 = x * z * t + y * s, b21 = y * z * t - x * s, b22 = z * z * t + c;
            if (!dest) {
                dest = mat;
            }
            else if (mat != dest) {
                dest[12] = mat[12];
                dest[13] = mat[13];
                dest[14] = mat[14];
                dest[15] = mat[15];
            }
            // Perform rotation-specific matrix multiplication
            dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
            dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
            dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
            dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
            dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
            dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
            dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
            dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
            dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
            dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
            dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
            dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
            return dest;
        };
        ;
        mat4.rotateX = function (mat, angle, dest) {
            var s = Math.sin(angle);
            var c = Math.cos(angle);
            // Cache the matrix values (makes for huge speed increases!)
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            if (!dest) {
                dest = mat;
            }
            else if (mat != dest) {
                dest[0] = mat[0];
                dest[1] = mat[1];
                dest[2] = mat[2];
                dest[3] = mat[3];
                dest[12] = mat[12];
                dest[13] = mat[13];
                dest[14] = mat[14];
                dest[15] = mat[15];
            }
            // Perform axis-specific matrix multiplication
            dest[4] = a10 * c + a20 * s;
            dest[5] = a11 * c + a21 * s;
            dest[6] = a12 * c + a22 * s;
            dest[7] = a13 * c + a23 * s;
            dest[8] = a10 * -s + a20 * c;
            dest[9] = a11 * -s + a21 * c;
            dest[10] = a12 * -s + a22 * c;
            dest[11] = a13 * -s + a23 * c;
            return dest;
        };
        ;
        mat4.rotateZ = function (mat, angle, dest) {
            var s = Math.sin(angle);
            var c = Math.cos(angle);
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            if (!dest) {
                dest = mat;
            }
            else if (mat != dest) {
                dest[8] = mat[8];
                dest[9] = mat[9];
                dest[10] = mat[10];
                dest[11] = mat[11];
                dest[12] = mat[12];
                dest[13] = mat[13];
                dest[14] = mat[14];
                dest[15] = mat[15];
            }
            // Perform axis-specific matrix multiplication
            dest[0] = a00 * c + a10 * s;
            dest[1] = a01 * c + a11 * s;
            dest[2] = a02 * c + a12 * s;
            dest[3] = a03 * c + a13 * s;
            dest[4] = a00 * -s + a10 * c;
            dest[5] = a01 * -s + a11 * c;
            dest[6] = a02 * -s + a12 * c;
            dest[7] = a03 * -s + a13 * c;
            return dest;
        };
        ;
        mat4.frustum = function (left, right, bottom, top, near, far, dest) {
            var rl = (right - left);
            var tb = (top - bottom);
            var fn = (far - near);
            dest[0] = (near * 2) / rl;
            dest[1] = 0;
            dest[2] = 0;
            dest[3] = 0;
            dest[4] = 0;
            dest[5] = (near * 2) / tb;
            dest[6] = 0;
            dest[7] = 0;
            dest[8] = (right + left) / rl;
            dest[9] = (top + bottom) / tb;
            dest[10] = -(far + near) / fn;
            dest[11] = -1;
            dest[12] = 0;
            dest[13] = 0;
            dest[14] = -(far * near * 2) / fn;
            dest[15] = 0;
            return dest;
        };
        ;
        mat4.perspective = function (fovy, aspect, near, far, dest) {
            var top = near * Math.tan(fovy * Math.PI / 360.0);
            var right = top * aspect;
            return mat4.frustum(-right, right, -top, top, near, far, dest);
        };
        ;
        mat4.ortho = function (left, right, bottom, top, near, far, dest) {
            var rl = (right - left);
            var tb = (top - bottom);
            var fn = (far - near);
            dest[0] = 2 / rl;
            dest[1] = 0;
            dest[2] = 0;
            dest[3] = 0;
            dest[4] = 0;
            dest[5] = 2 / tb;
            dest[6] = 0;
            dest[7] = 0;
            dest[8] = 0;
            dest[9] = 0;
            dest[10] = -2 / fn;
            dest[11] = 0;
            dest[12] = -(left + right) / rl;
            dest[13] = -(top + bottom) / tb;
            dest[14] = -(far + near) / fn;
            dest[15] = 1;
            return dest;
        };
        ;
        mat4.lookAt = function (eye, center, up, dest) {
            var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
            if (eyex == centerx && eyey == centery && eyez == centerz) {
                return mat4.identity(dest);
            }
            var z0, z1, z2, x0, x1, x2, y0, y1, y2, len;
            //vec3.direction(eye, center, z);
            z0 = eyex - center[0];
            z1 = eyey - center[1];
            z2 = eyez - center[2];
            // normalize (no check needed for 0 because of early return)
            len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
            z0 *= len;
            z1 *= len;
            z2 *= len;
            //vec3.normalize(vec3.cross(up, z, x));
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
            if (!len) {
                x0 = 0;
                x1 = 0;
                x2 = 0;
            }
            else {
                len = 1 / len;
                x0 *= len;
                x1 *= len;
                x2 *= len;
            }
            ;
            //vec3.normalize(vec3.cross(z, x, y));
            y0 = z1 * x2 - z2 * x1;
            y1 = z2 * x0 - z0 * x2;
            y2 = z0 * x1 - z1 * x0;
            len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
            if (!len) {
                y0 = 0;
                y1 = 0;
                y2 = 0;
            }
            else {
                len = 1 / len;
                y0 *= len;
                y1 *= len;
                y2 *= len;
            }
            dest[0] = x0;
            dest[1] = x1;
            dest[2] = x2;
            dest[3] = 0;
            dest[4] = y0;
            dest[5] = y1;
            dest[6] = y2;
            dest[7] = 0;
            dest[8] = z0;
            dest[9] = z1;
            dest[10] = z2;
            dest[11] = 0;
            dest[12] = eyex;
            dest[13] = eyey;
            dest[14] = eyez;
            dest[15] = 1;
            return dest;
        };
        ;
        mat4.setCol = function (_mat, _col, _vec) {
            var s = _col * 4;
            _mat[s] = _vec[0];
            _mat[s + 1] = _vec[1];
            _mat[s + 2] = _vec[2];
            _mat[s + 3] = _vec[3];
        };
        ;
        mat4.getCol = function (_mat, _col, _dst) {
            if (_dst === void 0) { _dst = [0.0, 0.0, 0.0, 0.0]; }
            var s = _col * 4;
            _dst[0] = _mat[s];
            _dst[1] = _mat[s + 1];
            _dst[2] = _mat[s + 2];
            _dst[3] = _mat[s + 3];
            return _dst;
        };
        ;
        mat4.str = function (mat) {
            return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', '
                + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', '
                + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] + ', '
                + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
        };
        ;
        return mat4;
    }());
    mat4.Identity = [
        1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
        0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0
    ];
    Demo.mat4 = mat4;
})(Demo || (Demo = {}));
/**
 * Created by ll on 2017/3/1.
 */
var Demo;
(function (Demo) {
    var Shader = (function () {
        function Shader(v, f, gl) {
            this.program = null;
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, v);
            gl.compileShader(vertexShader);
            var succ = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);
            if (!succ) {
                var log = gl.getShaderInfoLog(vertexShader);
                console.log("compile shader error:", log);
                return;
            }
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, f);
            gl.compileShader(fragmentShader);
            succ = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);
            if (!succ) {
                var log = gl.getShaderInfoLog(fragmentShader);
                console.log(log);
                return;
            }
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragmentShader);
            succ = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (!succ) {
                var log = gl.getProgramInfoLog(program);
                console.log(log);
                return;
            }
            this.program = program;
        }
        Shader.prototype.getWebglProgram = function () {
            return this.program;
        };
        return Shader;
    }());
    Demo.Shader = Shader;
})(Demo || (Demo = {}));
/**
 * Created by ll on 2017/7/10.
 */
var Demo;
(function (Demo) {
    var Shadow;
    (function (Shadow) {
        var vertex_debugShader = "#version 300 es\n        layout(location = 0) in vec2 position;\n        \n        out vec2 uv;\n        void main(){\n            gl_Position = vec4(position,0,1);\n            \n            uv = position*0.5+0.5;\n        }\n    ";
        var fragment_debugShader = "#version 300 es\n        precision highp float;\n        uniform sampler2D depthTexture;\n        \n        in vec2 uv;\n        \n        out vec4 color;\n        void main(){\n            \n            float depthValue = texture(depthTexture, uv).r;\n            // depthValue = 0.5;\n            color = vec4(vec3(depthValue), 1.0);\n        }\n    ";
        var vertex_simpleDepthShader = "#version 300 es\n        \n        layout(location = 0) in vec3 position;   \n           \n        uniform mat4 lightSpaceMatrix;\n        uniform mat4 model;\n        \n        void main(){\n            gl_Position = lightSpaceMatrix*model*vec4(position,1.);\n        }\n    \n    ";
        var fragment_simpleDepthShader = "#version 300 es\n        precision highp float;\n        \n        uniform vec3 diffuseColor;\n        \n        out vec4 color;\n        void main(){\n            color = vec4(vec3(gl_FragCoord.z),1.);\n        }\n    ";
        var vertex_sceneShader = "#version 300 es\n        layout(location = 0) in vec3 position;\n        \n        uniform mat4 projection;\n        uniform mat4 view;\n        uniform mat4 model;\n        \n        out vec4 fragPosLightSpace;\n        uniform mat4 lightSpaceMatrix;\n        \n        void main(){\n            gl_Position = projection*view*model*vec4(position,1.);\n            \n            fragPosLightSpace = lightSpaceMatrix*model*vec4(position,1.);\n        }\n    ";
        var fragment_sceneShader = "#version 300 es\n        precision highp float;\n        \n        out vec4 color;\n        \n        uniform vec3 diffuseColor;\n        \n        uniform  sampler2D depthTexture;\n        \n        in vec4 fragPosLightSpace;\n        \n        uniform float near_plane;\n        uniform float far_plane;\n        \n        vec2 poissonDisk[4] = vec2[](\n          vec2( -0.94201624, -0.39906216 ),\n          vec2( 0.94558609, -0.76890725 ),\n          vec2( -0.094184101, -0.92938870 ),\n          vec2( 0.34495938, 0.29387760 )\n        );\n        \n        \n        float random(vec3 seed,int i){\n            vec4 seed4 = vec4(seed,i);\n            float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));\n            return fract(sin(dot_product) * 43758.5453);\n        }\n        \n        \n        \n        float LinearizeDepth(float depth)\n        {\n            float z = depth * 2.0 - 1.0; // Back to NDC \n            return (2.0 * near_plane * far_plane) / (far_plane + near_plane - z * (far_plane - near_plane));\n        }\n        \n        float shadowCalculation(vec4 fragPosLightSpace){\n            vec3 projCoords = fragPosLightSpace.xyz/fragPosLightSpace.w;\n            projCoords = projCoords*0.5+0.5;\n            float currentDepth = projCoords.z;\n            \n            vec2 texelSize = vec2(ivec2(1))/vec2(textureSize(depthTexture,0));\n            float shadow = 1.;\n            for(int x = 0; x < 4;x++){\n                int index = int(16.0*random(gl_FragCoord.xyy, x))%16;\n                float pcfDepth = texture(depthTexture, projCoords.xy + poissonDisk[index]/1200.,(projCoords.z-0.005)/fragPosLightSpace.w).r; \n                 if(pcfDepth < currentDepth-0.005){\n                    shadow -= 0.2;\n                 }\n            }\n            shadow = 1.- shadow;\n            \n            // float shadow = texture(sampler2DShadow,projCoords.xy).r;\n            return shadow;\n        }\n        \n        void main(){\n            float shadow = shadowCalculation(fragPosLightSpace);\n             // shadow = 1.;\n            // color = vec4(diffuseColor*(1.-shadow),1.);\n           // color = vec4(vec3(shadow),1.);\n           \n           vec3 lighting = (0.15+(1.-shadow)*0.6)*diffuseColor;\n           color = vec4(vec3(lighting),1.);\n           \n           // shadow = LinearizeDepth(gl_FragCoord.z)/far_plane;\n           // color = vec4(vec3(shadow),1.);\n        }\n    ";
        var verticesQuad = new Float32Array([
            -1, 1, -1, -1, 1, 1,
            1, 1, -1, -1, 1, -1
        ]);
        Shadow.gl = null;
        var framebuffer = null;
        var programShadow = null;
        var lightSpaceMatrix = null;
        var width = 0, height = 0;
        var width_shadow = 1024, height_shadow = 1024;
        function init(w, h) {
            width = w;
            height = h;
            initShaders();
            configShaderAndMatrix();
            initFrameBuffer();
        }
        Shadow.init = init;
        var textureDepth = null;
        function initFrameBuffer() {
            textureDepth = Shadow.gl.createTexture();
            Shadow.gl.bindTexture(Shadow.gl.TEXTURE_2D, textureDepth);
            Shadow.gl.texImage2D(Shadow.gl.TEXTURE_2D, 0, Shadow.gl.DEPTH_COMPONENT16, width_shadow, height_shadow, 0, Shadow.gl.DEPTH_COMPONENT, Shadow.gl.UNSIGNED_SHORT, null);
            Shadow.gl.texParameteri(Shadow.gl.TEXTURE_2D, Shadow.gl.TEXTURE_MAG_FILTER, Shadow.gl.NEAREST);
            Shadow.gl.texParameteri(Shadow.gl.TEXTURE_2D, Shadow.gl.TEXTURE_MIN_FILTER, Shadow.gl.NEAREST);
            Shadow.gl.texParameteri(Shadow.gl.TEXTURE_2D, Shadow.gl.TEXTURE_WRAP_T, Shadow.gl.REPEAT);
            Shadow.gl.texParameteri(Shadow.gl.TEXTURE_2D, Shadow.gl.TEXTURE_WRAP_S, Shadow.gl.REPEAT);
            framebuffer = Shadow.gl.createFramebuffer();
            Shadow.gl.bindFramebuffer(Shadow.gl.FRAMEBUFFER, framebuffer);
            Shadow.gl.framebufferTexture2D(Shadow.gl.FRAMEBUFFER, Shadow.gl.DEPTH_ATTACHMENT, Shadow.gl.TEXTURE_2D, textureDepth, 0);
            Demo.any(Shadow.gl).drawBuffers([Shadow.gl.NONE]);
            Demo.any(Shadow.gl).readBuffer(Shadow.gl.NONE);
            Shadow.gl.bindFramebuffer(Shadow.gl.FRAMEBUFFER, null);
        }
        function configShaderAndMatrix() {
            var shader = new Demo.Shader(vertex_simpleDepthShader, fragment_simpleDepthShader, Shadow.gl);
            programShadow = shader.program;
            var projection = Demo.mat4.ortho(-10, 10, -10, 10, 1, 7.5, []);
            var view = Demo.mat4.lookAt([-2, 4, -1], [0, 0, 0], [0, 1, 0], []);
            var viewInverse = Demo.mat4.inverse(view, []);
            lightSpaceMatrix = Demo.mat4.multiply(projection, viewInverse, []);
        }
        var programScene = null;
        var programDebug = null;
        function initShaders() {
            var shader = new Demo.Shader(vertex_sceneShader, fragment_sceneShader, Shadow.gl);
            programScene = shader.program;
            shader = new Demo.Shader(vertex_debugShader, fragment_debugShader, Shadow.gl);
            programDebug = shader.program;
        }
        var projectionScene = [];
        var viewScene = [];
        function render() {
            Shadow.gl.viewport(0, 0, width_shadow, height_shadow);
            Shadow.gl.enable(Shadow.gl.DEPTH_TEST);
            Shadow.gl.depthFunc(Shadow.gl.LEQUAL);
            Shadow.gl.useProgram(programShadow);
            Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(programShadow, "lightSpaceMatrix"), false, lightSpaceMatrix);
            Shadow.gl.bindFramebuffer(Shadow.gl.FRAMEBUFFER, framebuffer);
            Shadow.gl.clear(Shadow.gl.COLOR_BUFFER_BIT | Shadow.gl.DEPTH_BUFFER_BIT);
            Shadow.gl.enable(Shadow.gl.CULL_FACE);
            // gl.cullFace(gl.FRONT);
            renderScene(programShadow);
            Shadow.gl.cullFace(Shadow.gl.BACK);
            Shadow.gl.bindFramebuffer(Shadow.gl.FRAMEBUFFER, null);
            var debug = false;
            if (debug) {
                //render texture to quad
                Shadow.gl.useProgram(programDebug);
                Shadow.gl.activeTexture(Shadow.gl.TEXTURE0);
                Shadow.gl.bindTexture(Shadow.gl.TEXTURE_2D, textureDepth);
                Shadow.gl.uniform1i(Shadow.gl.getUniformLocation(programDebug, "depthTexture"), 0);
                Shadow.gl.viewport(0, 0, width, height);
                renderQuad();
            }
            if (!debug) {
                Shadow.gl.enable(Shadow.gl.DEPTH_TEST);
                Shadow.gl.depthFunc(Shadow.gl.LEQUAL);
                Shadow.gl.viewport(0, 0, width, height);
                Shadow.gl.clear(Shadow.gl.COLOR_BUFFER_BIT | Shadow.gl.DEPTH_BUFFER_BIT);
                Shadow.gl.useProgram(programScene);
                projectionScene = Demo.mat4.perspective(45, width / height, 0.1, 100, projectionScene);
                // projectionScene = mat4.ortho(-10,10,-10,10,1,7.5,projectionScene);
                Shadow.gl.uniform1f(Shadow.gl.getUniformLocation(programScene, "near_plane"), 0.1);
                Shadow.gl.uniform1f(Shadow.gl.getUniformLocation(programScene, "far_plane"), 100);
                viewScene = Demo.mat4.create();
                viewScene = Demo.mat4.lookAt([2, 2, 5], [0, 0, 0], [0, 1, 0], viewScene);
                viewScene = Demo.mat4.inverse(viewScene, viewScene);
                Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(programScene, "projection"), false, projectionScene);
                Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(programScene, "view"), false, viewScene);
                Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(programScene, "lightSpaceMatrix"), false, lightSpaceMatrix);
                Shadow.gl.activeTexture(Shadow.gl.TEXTURE0);
                Shadow.gl.bindTexture(Shadow.gl.TEXTURE_2D, textureDepth);
                Shadow.gl.uniform1i(Shadow.gl.getUniformLocation(programScene, "depthTexture"), 0);
                renderScene(programScene);
            }
        }
        Shadow.render = render;
        function renderScene(program) {
            var model = Demo.mat4.create();
            Demo.mat4.setCol(model, 3, [0, 0.25, 0, 1]);
            Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(program, "model"), false, model);
            Shadow.gl.uniform3fv(Shadow.gl.getUniformLocation(program, "diffuseColor"), [1., 1., 0.1]);
            renderFloor(program);
            model = Demo.mat4.create();
            Demo.mat4.setCol(model, 3, [0, 1., 0, 1]);
            model = Demo.mat4.scale(model, [0.5, 0.5, 0.5], model);
            Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(program, "model"), false, model);
            Shadow.gl.uniform3fv(Shadow.gl.getUniformLocation(program, "diffuseColor"), [1., 0, 0.]);
            renderCube(program);
            model = Demo.mat4.create();
            Demo.mat4.setCol(model, 3, [2, 0, 1, 1]);
            model = Demo.mat4.scale(model, [0.5, 0.5, 0.5], model);
            Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(program, "model"), false, model);
            Shadow.gl.uniform3fv(Shadow.gl.getUniformLocation(program, "diffuseColor"), [0., 1., 0.]);
            renderCube(program);
            var model3 = Demo.mat4.create();
            Demo.mat4.setCol(model3, 3, [-1, 0, 2, 1]);
            model3 = Demo.mat4.scale(model3, [0.25, 0.25, 0.25], model3);
            Shadow.gl.uniformMatrix4fv(Shadow.gl.getUniformLocation(program, "model"), false, model3);
            Shadow.gl.uniform3fv(Shadow.gl.getUniformLocation(program, "diffuseColor"), [.0, 0., 1.]);
            renderCube(program);
        }
        var vertices_cube = new Float32Array([
            // Back face
            -0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 0.0,
            0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 1.0,
            0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 0.0,
            0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 1.0,
            -0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 0.0,
            -0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 1.0,
            // Front face
            -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0,
            0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.0,
            0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
            0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
            -0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 1.0,
            -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0,
            // Left face
            -0.5, 0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 0.0,
            -0.5, 0.5, -0.5, -1.0, 0.0, 0.0, 1.0, 1.0,
            -0.5, -0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 1.0,
            -0.5, -0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 1.0,
            -0.5, -0.5, 0.5, -1.0, 0.0, 0.0, 0.0, 0.0,
            -0.5, 0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 0.0,
            // Right face
            0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0,
            0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 1.0,
            0.5, 0.5, -0.5, 1.0, 0.0, 0.0, 1.0, 1.0,
            0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 1.0,
            0.5, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0,
            0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0,
            // Bottom face
            -0.5, -0.5, -0.5, 0.0, -1.0, 0.0, 0.0, 1.0,
            0.5, -0.5, -0.5, 0.0, -1.0, 0.0, 1.0, 1.0,
            0.5, -0.5, 0.5, 0.0, -1.0, 0.0, 1.0, 0.0,
            0.5, -0.5, 0.5, 0.0, -1.0, 0.0, 1.0, 0.0,
            -0.5, -0.5, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0,
            -0.5, -0.5, -0.5, 0.0, -1.0, 0.0, 0.0, 1.0,
            // Top face
            -0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
            0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0,
            0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 1.0, 1.0,
            0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0,
            -0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
            -0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0 // bottom-left
        ]);
        var vaoCube = null;
        function initCubeVao() {
            if (vaoCube !== null)
                return;
            vaoCube = Demo.any(Shadow.gl).createVertexArray();
            Demo.any(Shadow.gl).bindVertexArray(vaoCube);
            var vbo = Shadow.gl.createBuffer();
            Shadow.gl.bindBuffer(Shadow.gl.ARRAY_BUFFER, vbo);
            Shadow.gl.bufferData(Shadow.gl.ARRAY_BUFFER, vertices_cube, Shadow.gl.STATIC_DRAW);
            Shadow.gl.vertexAttribPointer(0, 3, Shadow.gl.FLOAT, false, 32, 0);
            Shadow.gl.enableVertexAttribArray(0);
            Demo.any(Shadow.gl).bindVertexArray(null);
            Shadow.gl.bindBuffer(Shadow.gl.ARRAY_BUFFER, null);
        }
        function renderCube(program) {
            initCubeVao();
            Demo.any(Shadow.gl).bindVertexArray(vaoCube);
            Shadow.gl.drawArrays(Shadow.gl.TRIANGLES, 0, 36);
            Demo.any(Shadow.gl).bindVertexArray(null);
        }
        var vaoFloor = null;
        function renderFloor(program) {
            var floorVertices = new Float32Array([
                // Positions          // Normals         // Texture Coords
                25.0, -0.5, 25.0, 0.0, 1.0, 0.0, 25.0, 0.0,
                -25.0, -0.5, -25.0, 0.0, 1.0, 0.0, 0.0, 25.0,
                -25.0, -0.5, 25.0, 0.0, 1.0, 0.0, 0.0, 0.0,
                25.0, -0.5, 25.0, 0.0, 1.0, 0.0, 25.0, 0.0,
                25.0, -0.5, -25.0, 0.0, 1.0, 0.0, 25.0, 25.0,
                -25.0, -0.5, -25.0, 0.0, 1.0, 0.0, 0.0, 25.0
            ]);
            if (vaoFloor === null) {
                vaoFloor = Demo.any(Shadow.gl).createVertexArray();
                Demo.any(Shadow.gl).bindVertexArray(vaoFloor);
                var vbo = Shadow.gl.createBuffer();
                Shadow.gl.bindBuffer(Shadow.gl.ARRAY_BUFFER, vbo);
                Shadow.gl.bufferData(Shadow.gl.ARRAY_BUFFER, floorVertices, Shadow.gl.STATIC_DRAW);
                Shadow.gl.vertexAttribPointer(0, 3, Shadow.gl.FLOAT, false, 8 * 4, 0);
                Shadow.gl.enableVertexAttribArray(0);
                Demo.any(Shadow.gl).bindVertexArray(null);
                Shadow.gl.bindBuffer(Shadow.gl.ARRAY_BUFFER, null);
            }
            Shadow.gl.uniform3fv(Shadow.gl.getUniformLocation(program, "diffuse"), [1, 0.5, 0.5]);
            Demo.any(Shadow.gl).bindVertexArray(vaoFloor);
            Shadow.gl.drawArrays(Shadow.gl.TRIANGLES, 0, 6);
            Demo.any(Shadow.gl).bindVertexArray(null);
        }
        var vaoQuad = null;
        function renderQuad(program) {
            if (program === void 0) { program = null; }
            if (vaoQuad === null) {
                vaoQuad = Demo.any(Shadow.gl).createVertexArray();
                Demo.any(Shadow.gl).bindVertexArray(vaoQuad);
                var vbo = Shadow.gl.createBuffer();
                Shadow.gl.bindBuffer(Shadow.gl.ARRAY_BUFFER, vbo);
                Shadow.gl.bufferData(Shadow.gl.ARRAY_BUFFER, verticesQuad, Shadow.gl.STATIC_DRAW);
                Shadow.gl.vertexAttribPointer(0, 2, Shadow.gl.FLOAT, false, 0, 0);
                Shadow.gl.enableVertexAttribArray(0);
                Demo.any(Shadow.gl).bindVertexArray(null);
                Shadow.gl.bindBuffer(Shadow.gl.ARRAY_BUFFER, null);
            }
            Demo.any(Shadow.gl).bindVertexArray(vaoQuad);
            Shadow.gl.drawArrays(Shadow.gl.TRIANGLES, 0, 6);
            Demo.any(Shadow.gl).bindVertexArray(null);
        }
    })(Shadow = Demo.Shadow || (Demo.Shadow = {}));
})(Demo || (Demo = {}));
/**
 * Created by hey on 2017/7/9.
 */
var Demo;
(function (Demo) {
    var Triangle;
    (function (Triangle) {
        // import any = Demo.any;
        // import Shader = Demo.Shader;
        Triangle.gl = null;
        var vao = null;
        var program = null;
        var vertices = new Float32Array([
            0, 0.5,
            0.5, -0.5,
            -0.5, -0.5
        ]);
        var colors = new Float32Array([
            1.0, 0, 0,
            0., 1, 0,
            0, 0, 1
        ]);
        var indices = new Uint16Array([
            0, 1, 2
        ]);
        var shader_vertex = "#version 300 es\n        \n        layout(location = 0) in vec2 position;\n        layout(location = 1) in vec3 color;\n        \n        out vec3 outColor;\n        \n        void main(){\n            outColor = color;\n            gl_Position = vec4(position,1.,1.);\n        }\n        \n    ";
        var shader_fragment = "#version 300 es\n        precision highp float;\n        in vec3 outColor;\n        out vec4 color;\n        void main(){\n            color = vec4(outColor,1.);\n        }\n        \n    ";
        function init(w, h) {
            Triangle.gl.viewport(0, 0, w, h);
            initVAO();
            initProgram();
        }
        Triangle.init = init;
        function initVAO() {
            vao = Demo.any(Triangle.gl).createVertexArray();
            Demo.any(Triangle.gl).bindVertexArray(vao);
            var vbo = Triangle.gl.createBuffer();
            Triangle.gl.bindBuffer(Triangle.gl.ARRAY_BUFFER, vbo);
            Triangle.gl.bufferData(Triangle.gl.ARRAY_BUFFER, vertices, Triangle.gl.STATIC_DRAW);
            Triangle.gl.vertexAttribPointer(0, 2, Triangle.gl.FLOAT, false, 0, 0);
            Triangle.gl.enableVertexAttribArray(0);
            var vbo1 = Triangle.gl.createBuffer();
            Triangle.gl.bindBuffer(Triangle.gl.ARRAY_BUFFER, vbo1);
            Triangle.gl.bufferData(Triangle.gl.ARRAY_BUFFER, colors, Triangle.gl.STATIC_DRAW);
            Triangle.gl.vertexAttribPointer(1, 3, Triangle.gl.FLOAT, false, 0, 0);
            Triangle.gl.enableVertexAttribArray(1);
            var vbo2 = Triangle.gl.createBuffer();
            Triangle.gl.bindBuffer(Triangle.gl.ELEMENT_ARRAY_BUFFER, vbo2);
            Triangle.gl.bufferData(Triangle.gl.ELEMENT_ARRAY_BUFFER, indices, Triangle.gl.STATIC_DRAW);
            Demo.any(Triangle.gl).bindVertexArray(null);
            Triangle.gl.bindBuffer(Triangle.gl.ARRAY_BUFFER, null);
            Triangle.gl.bindBuffer(Triangle.gl.ELEMENT_ARRAY_BUFFER, null);
        }
        function initProgram() {
            var shader = new Demo.Shader(shader_vertex, shader_fragment, Triangle.gl);
            program = shader.program;
        }
        function render() {
            Triangle.gl.clear(Triangle.gl.COLOR_BUFFER_BIT | Triangle.gl.DEPTH_BUFFER_BIT);
            Triangle.gl.useProgram(program);
            Demo.any(Triangle.gl).bindVertexArray(vao);
            Triangle.gl.drawElements(Triangle.gl.TRIANGLES, 3, Triangle.gl.UNSIGNED_SHORT, 0);
            Demo.any(Triangle.gl).bindVertexArray(vao);
        }
        Triangle.render = render;
    })(Triangle = Demo.Triangle || (Demo.Triangle = {}));
})(Demo || (Demo = {}));
/**
 * Created by ll on 2017/7/20.
 */
var Demo;
(function (Demo) {
    var UBO;
    (function (UBO) {
        var vs = "#version 300 es\n        \n        layout(location = 0) in vec2 position;\n        \n        void main(){\n            gl_Position = vec4(position,0.,1.);\n        }\n    ";
        var fs = "#version 300 es\n        precision highp float;\n        \n        layout(std140) uniform colors{\n            float red;\n            float a[1];\n        };\n        \n        out vec4 color;\n        void main(){\n            color = vec4(vec3(red*a[0],0.,0.),1.);\n        }\n    ";
        var vertices = new Float32Array([
            -1, -1,
            -1, 1,
            1, -1,
            1, 1
        ]);
        var indices = new Uint16Array([
            0, 1, 2, 3
        ]);
        UBO.gl = null;
        var vao = null;
        var program = null;
        var uniformIndex = null;
        var colorsBuffer = null;
        function init() {
            initGeometry();
            initShader();
            initUniformBuffer();
        }
        UBO.init = init;
        function initGeometry() {
            var positionBuffer = UBO.gl.createBuffer();
            UBO.gl.bindBuffer(UBO.gl.ARRAY_BUFFER, positionBuffer);
            UBO.gl.bufferData(UBO.gl.ARRAY_BUFFER, vertices, UBO.gl.STATIC_DRAW);
            UBO.gl.bindBuffer(UBO.gl.ARRAY_BUFFER, null);
            var indicesBuffer = UBO.gl.createBuffer();
            UBO.gl.bindBuffer(UBO.gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
            UBO.gl.bufferData(UBO.gl.ELEMENT_ARRAY_BUFFER, indices, UBO.gl.STATIC_DRAW);
            UBO.gl.bindBuffer(UBO.gl.ELEMENT_ARRAY_BUFFER, null);
            vao = Demo.any(UBO.gl).createVertexArray();
            Demo.any(UBO.gl).bindVertexArray(vao);
            UBO.gl.bindBuffer(UBO.gl.ARRAY_BUFFER, positionBuffer);
            UBO.gl.vertexAttribPointer(0, 2, UBO.gl.FLOAT, false, 0, 0);
            UBO.gl.enableVertexAttribArray(0);
            UBO.gl.bindBuffer(UBO.gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
            Demo.any(UBO.gl).bindVertexArray(null);
        }
        function initUniformBuffer() {
            var colors = new Float32Array([
                0.1, 0, 0, 0,
                1., 0, 0, 0 //array's base aligment is vec4
            ]);
            colorsBuffer = UBO.gl.createBuffer();
            UBO.gl.bindBuffer(Demo.any(UBO.gl).UNIFORM_BUFFER, colorsBuffer);
            UBO.gl.bufferData(Demo.any(UBO.gl).UNIFORM_BUFFER, colors, UBO.gl.STATIC_DRAW);
        }
        function initShader() {
            var shader = new Demo.Shader(vs, fs, UBO.gl);
            program = shader.program;
            uniformIndex = Demo.any(UBO.gl).getUniformBlockIndex(program, "colors");
        }
        function render() {
            Demo.any(UBO.gl).bindVertexArray(vao);
            UBO.gl.useProgram(program);
            Demo.any(UBO.gl).bindBufferBase(Demo.any(UBO.gl).UNIFORM_BUFFER, uniformIndex, colorsBuffer);
            UBO.gl.drawElements(UBO.gl.TRIANGLE_STRIP, 4, UBO.gl.UNSIGNED_SHORT, 0);
            Demo.any(UBO.gl).bindVertexArray(null);
        }
        UBO.render = render;
    })(UBO = Demo.UBO || (Demo.UBO = {}));
})(Demo || (Demo = {}));
/**
 * Created by hey on 2017/7/9.
 */
var Demo;
(function (Demo) {
    function any(tar) {
        return tar;
    }
    Demo.any = any;
})(Demo || (Demo = {}));
//# sourceMappingURL=bundle.min.js.map